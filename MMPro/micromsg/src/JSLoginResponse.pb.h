// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JSLoginResponse.proto

#ifndef PROTOBUF_JSLoginResponse_2eproto__INCLUDED
#define PROTOBUF_JSLoginResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "BaseResponse.pb.h"
#include "ScopeList.pb.h"
#include "JsApiBaseResponse.pb.h"
// @@protoc_insertion_point(includes)
namespace MMPro {
namespace micromsg {
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class JSLoginResponse;
class JSLoginResponseDefaultTypeInternal;
extern JSLoginResponseDefaultTypeInternal _JSLoginResponse_default_instance_;
class JsApiBaseResponse;
class JsApiBaseResponseDefaultTypeInternal;
extern JsApiBaseResponseDefaultTypeInternal _JsApiBaseResponse_default_instance_;
class ScopeList;
class ScopeListDefaultTypeInternal;
extern ScopeListDefaultTypeInternal _ScopeList_default_instance_;
}  // namespace micromsg
}  // namespace MMPro

namespace MMPro {
namespace micromsg {

namespace protobuf_JSLoginResponse_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_JSLoginResponse_2eproto

// ===================================================================

class JSLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MMPro.micromsg.JSLoginResponse) */ {
 public:
  JSLoginResponse();
  virtual ~JSLoginResponse();

  JSLoginResponse(const JSLoginResponse& from);

  inline JSLoginResponse& operator=(const JSLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JSLoginResponse& default_instance();

  static inline const JSLoginResponse* internal_default_instance() {
    return reinterpret_cast<const JSLoginResponse*>(
               &_JSLoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(JSLoginResponse* other);

  // implements Message ----------------------------------------------

  inline JSLoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  JSLoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JSLoginResponse& from);
  void MergeFrom(const JSLoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JSLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MMPro.micromsg.ScopeList _ScopeList = 4;
  int _scopelist_size() const;
  void clear__scopelist();
  static const int kScopeListFieldNumber = 4;
  const ::MMPro::micromsg::ScopeList& _scopelist(int index) const;
  ::MMPro::micromsg::ScopeList* mutable__scopelist(int index);
  ::MMPro::micromsg::ScopeList* add__scopelist();
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ScopeList >*
      mutable__scopelist();
  const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ScopeList >&
      _scopelist() const;

  // optional string _Code = 3;
  bool has__code() const;
  void clear__code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& _code() const;
  void set__code(const ::std::string& value);
  #if LANG_CXX11
  void set__code(::std::string&& value);
  #endif
  void set__code(const char* value);
  void set__code(const char* value, size_t size);
  ::std::string* mutable__code();
  ::std::string* release__code();
  void set_allocated__code(::std::string* _code);

  // optional string _AppName = 5;
  bool has__appname() const;
  void clear__appname();
  static const int kAppNameFieldNumber = 5;
  const ::std::string& _appname() const;
  void set__appname(const ::std::string& value);
  #if LANG_CXX11
  void set__appname(::std::string&& value);
  #endif
  void set__appname(const char* value);
  void set__appname(const char* value, size_t size);
  ::std::string* mutable__appname();
  ::std::string* release__appname();
  void set_allocated__appname(::std::string* _appname);

  // optional string _AppIConUrl = 6;
  bool has__appiconurl() const;
  void clear__appiconurl();
  static const int kAppIConUrlFieldNumber = 6;
  const ::std::string& _appiconurl() const;
  void set__appiconurl(const ::std::string& value);
  #if LANG_CXX11
  void set__appiconurl(::std::string&& value);
  #endif
  void set__appiconurl(const char* value);
  void set__appiconurl(const char* value, size_t size);
  ::std::string* mutable__appiconurl();
  ::std::string* release__appiconurl();
  void set_allocated__appiconurl(::std::string* _appiconurl);

  // optional string _Openid = 7;
  bool has__openid() const;
  void clear__openid();
  static const int kOpenidFieldNumber = 7;
  const ::std::string& _openid() const;
  void set__openid(const ::std::string& value);
  #if LANG_CXX11
  void set__openid(::std::string&& value);
  #endif
  void set__openid(const char* value);
  void set__openid(const char* value, size_t size);
  ::std::string* mutable__openid();
  ::std::string* release__openid();
  void set_allocated__openid(::std::string* _openid);

  // optional string _HasSessionKey = 8;
  bool has__hassessionkey() const;
  void clear__hassessionkey();
  static const int kHasSessionKeyFieldNumber = 8;
  const ::std::string& _hassessionkey() const;
  void set__hassessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set__hassessionkey(::std::string&& value);
  #endif
  void set__hassessionkey(const char* value);
  void set__hassessionkey(const char* value, size_t size);
  ::std::string* mutable__hassessionkey();
  ::std::string* release__hassessionkey();
  void set_allocated__hassessionkey(::std::string* _hassessionkey);

  // optional string _SessionTicket = 9;
  bool has__sessionticket() const;
  void clear__sessionticket();
  static const int kSessionTicketFieldNumber = 9;
  const ::std::string& _sessionticket() const;
  void set__sessionticket(const ::std::string& value);
  #if LANG_CXX11
  void set__sessionticket(::std::string&& value);
  #endif
  void set__sessionticket(const char* value);
  void set__sessionticket(const char* value, size_t size);
  ::std::string* mutable__sessionticket();
  ::std::string* release__sessionticket();
  void set_allocated__sessionticket(::std::string* _sessionticket);

  // optional string _State = 11;
  bool has__state() const;
  void clear__state();
  static const int kStateFieldNumber = 11;
  const ::std::string& _state() const;
  void set__state(const ::std::string& value);
  #if LANG_CXX11
  void set__state(::std::string&& value);
  #endif
  void set__state(const char* value);
  void set__state(const char* value, size_t size);
  ::std::string* mutable__state();
  ::std::string* release__state();
  void set_allocated__state(::std::string* _state);

  // optional string _Signature = 12;
  bool has__signature() const;
  void clear__signature();
  static const int kSignatureFieldNumber = 12;
  const ::std::string& _signature() const;
  void set__signature(const ::std::string& value);
  #if LANG_CXX11
  void set__signature(::std::string&& value);
  #endif
  void set__signature(const char* value);
  void set__signature(const char* value, size_t size);
  ::std::string* mutable__signature();
  ::std::string* release__signature();
  void set_allocated__signature(::std::string* _signature);

  // required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
  bool has__baseresponse() const;
  void clear__baseresponse();
  static const int kBaseResponseFieldNumber = 1;
  const ::MMPro::micromsg::BaseResponse& _baseresponse() const;
  ::MMPro::micromsg::BaseResponse* mutable__baseresponse();
  ::MMPro::micromsg::BaseResponse* release__baseresponse();
  void set_allocated__baseresponse(::MMPro::micromsg::BaseResponse* _baseresponse);

  // optional .MMPro.micromsg.JsApiBaseResponse _JsApiBaseResponse = 2;
  bool has__jsapibaseresponse() const;
  void clear__jsapibaseresponse();
  static const int kJsApiBaseResponseFieldNumber = 2;
  const ::MMPro::micromsg::JsApiBaseResponse& _jsapibaseresponse() const;
  ::MMPro::micromsg::JsApiBaseResponse* mutable__jsapibaseresponse();
  ::MMPro::micromsg::JsApiBaseResponse* release__jsapibaseresponse();
  void set_allocated__jsapibaseresponse(::MMPro::micromsg::JsApiBaseResponse* _jsapibaseresponse);

  // optional uint32 _Lifespan = 10;
  bool has__lifespan() const;
  void clear__lifespan();
  static const int kLifespanFieldNumber = 10;
  ::google::protobuf::uint32 _lifespan() const;
  void set__lifespan(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MMPro.micromsg.JSLoginResponse)
 private:
  void set_has__baseresponse();
  void clear_has__baseresponse();
  void set_has__jsapibaseresponse();
  void clear_has__jsapibaseresponse();
  void set_has__code();
  void clear_has__code();
  void set_has__appname();
  void clear_has__appname();
  void set_has__appiconurl();
  void clear_has__appiconurl();
  void set_has__openid();
  void clear_has__openid();
  void set_has__hassessionkey();
  void clear_has__hassessionkey();
  void set_has__sessionticket();
  void clear_has__sessionticket();
  void set_has__lifespan();
  void clear_has__lifespan();
  void set_has__state();
  void clear_has__state();
  void set_has__signature();
  void clear_has__signature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ScopeList > _scopelist_;
  ::google::protobuf::internal::ArenaStringPtr _code_;
  ::google::protobuf::internal::ArenaStringPtr _appname_;
  ::google::protobuf::internal::ArenaStringPtr _appiconurl_;
  ::google::protobuf::internal::ArenaStringPtr _openid_;
  ::google::protobuf::internal::ArenaStringPtr _hassessionkey_;
  ::google::protobuf::internal::ArenaStringPtr _sessionticket_;
  ::google::protobuf::internal::ArenaStringPtr _state_;
  ::google::protobuf::internal::ArenaStringPtr _signature_;
  ::MMPro::micromsg::BaseResponse* _baseresponse_;
  ::MMPro::micromsg::JsApiBaseResponse* _jsapibaseresponse_;
  ::google::protobuf::uint32 _lifespan_;
  friend struct protobuf_JSLoginResponse_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// JSLoginResponse

// required .MMPro.micromsg.BaseResponse _BaseResponse = 1;
inline bool JSLoginResponse::has__baseresponse() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JSLoginResponse::set_has__baseresponse() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JSLoginResponse::clear_has__baseresponse() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JSLoginResponse::clear__baseresponse() {
  if (_baseresponse_ != NULL) _baseresponse_->::MMPro::micromsg::BaseResponse::Clear();
  clear_has__baseresponse();
}
inline const ::MMPro::micromsg::BaseResponse& JSLoginResponse::_baseresponse() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._BaseResponse)
  return _baseresponse_ != NULL ? *_baseresponse_
                         : *::MMPro::micromsg::BaseResponse::internal_default_instance();
}
inline ::MMPro::micromsg::BaseResponse* JSLoginResponse::mutable__baseresponse() {
  set_has__baseresponse();
  if (_baseresponse_ == NULL) {
    _baseresponse_ = new ::MMPro::micromsg::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._BaseResponse)
  return _baseresponse_;
}
inline ::MMPro::micromsg::BaseResponse* JSLoginResponse::release__baseresponse() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._BaseResponse)
  clear_has__baseresponse();
  ::MMPro::micromsg::BaseResponse* temp = _baseresponse_;
  _baseresponse_ = NULL;
  return temp;
}
inline void JSLoginResponse::set_allocated__baseresponse(::MMPro::micromsg::BaseResponse* _baseresponse) {
  delete _baseresponse_;
  _baseresponse_ = _baseresponse;
  if (_baseresponse) {
    set_has__baseresponse();
  } else {
    clear_has__baseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._BaseResponse)
}

// optional .MMPro.micromsg.JsApiBaseResponse _JsApiBaseResponse = 2;
inline bool JSLoginResponse::has__jsapibaseresponse() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JSLoginResponse::set_has__jsapibaseresponse() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JSLoginResponse::clear_has__jsapibaseresponse() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JSLoginResponse::clear__jsapibaseresponse() {
  if (_jsapibaseresponse_ != NULL) _jsapibaseresponse_->::MMPro::micromsg::JsApiBaseResponse::Clear();
  clear_has__jsapibaseresponse();
}
inline const ::MMPro::micromsg::JsApiBaseResponse& JSLoginResponse::_jsapibaseresponse() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._JsApiBaseResponse)
  return _jsapibaseresponse_ != NULL ? *_jsapibaseresponse_
                         : *::MMPro::micromsg::JsApiBaseResponse::internal_default_instance();
}
inline ::MMPro::micromsg::JsApiBaseResponse* JSLoginResponse::mutable__jsapibaseresponse() {
  set_has__jsapibaseresponse();
  if (_jsapibaseresponse_ == NULL) {
    _jsapibaseresponse_ = new ::MMPro::micromsg::JsApiBaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._JsApiBaseResponse)
  return _jsapibaseresponse_;
}
inline ::MMPro::micromsg::JsApiBaseResponse* JSLoginResponse::release__jsapibaseresponse() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._JsApiBaseResponse)
  clear_has__jsapibaseresponse();
  ::MMPro::micromsg::JsApiBaseResponse* temp = _jsapibaseresponse_;
  _jsapibaseresponse_ = NULL;
  return temp;
}
inline void JSLoginResponse::set_allocated__jsapibaseresponse(::MMPro::micromsg::JsApiBaseResponse* _jsapibaseresponse) {
  delete _jsapibaseresponse_;
  _jsapibaseresponse_ = _jsapibaseresponse;
  if (_jsapibaseresponse) {
    set_has__jsapibaseresponse();
  } else {
    clear_has__jsapibaseresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._JsApiBaseResponse)
}

// optional string _Code = 3;
inline bool JSLoginResponse::has__code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JSLoginResponse::set_has__code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JSLoginResponse::clear_has__code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JSLoginResponse::clear__code() {
  _code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__code();
}
inline const ::std::string& JSLoginResponse::_code() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._Code)
  return _code_.GetNoArena();
}
inline void JSLoginResponse::set__code(const ::std::string& value) {
  set_has__code();
  _code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._Code)
}
#if LANG_CXX11
inline void JSLoginResponse::set__code(::std::string&& value) {
  set_has__code();
  _code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._Code)
}
#endif
inline void JSLoginResponse::set__code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__code();
  _code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._Code)
}
inline void JSLoginResponse::set__code(const char* value, size_t size) {
  set_has__code();
  _code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._Code)
}
inline ::std::string* JSLoginResponse::mutable__code() {
  set_has__code();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._Code)
  return _code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__code() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._Code)
  clear_has__code();
  return _code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__code(::std::string* _code) {
  if (_code != NULL) {
    set_has__code();
  } else {
    clear_has__code();
  }
  _code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _code);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._Code)
}

// repeated .MMPro.micromsg.ScopeList _ScopeList = 4;
inline int JSLoginResponse::_scopelist_size() const {
  return _scopelist_.size();
}
inline void JSLoginResponse::clear__scopelist() {
  _scopelist_.Clear();
}
inline const ::MMPro::micromsg::ScopeList& JSLoginResponse::_scopelist(int index) const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._ScopeList)
  return _scopelist_.Get(index);
}
inline ::MMPro::micromsg::ScopeList* JSLoginResponse::mutable__scopelist(int index) {
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._ScopeList)
  return _scopelist_.Mutable(index);
}
inline ::MMPro::micromsg::ScopeList* JSLoginResponse::add__scopelist() {
  // @@protoc_insertion_point(field_add:MMPro.micromsg.JSLoginResponse._ScopeList)
  return _scopelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ScopeList >*
JSLoginResponse::mutable__scopelist() {
  // @@protoc_insertion_point(field_mutable_list:MMPro.micromsg.JSLoginResponse._ScopeList)
  return &_scopelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::MMPro::micromsg::ScopeList >&
JSLoginResponse::_scopelist() const {
  // @@protoc_insertion_point(field_list:MMPro.micromsg.JSLoginResponse._ScopeList)
  return _scopelist_;
}

// optional string _AppName = 5;
inline bool JSLoginResponse::has__appname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JSLoginResponse::set_has__appname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JSLoginResponse::clear_has__appname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JSLoginResponse::clear__appname() {
  _appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__appname();
}
inline const ::std::string& JSLoginResponse::_appname() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._AppName)
  return _appname_.GetNoArena();
}
inline void JSLoginResponse::set__appname(const ::std::string& value) {
  set_has__appname();
  _appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._AppName)
}
#if LANG_CXX11
inline void JSLoginResponse::set__appname(::std::string&& value) {
  set_has__appname();
  _appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._AppName)
}
#endif
inline void JSLoginResponse::set__appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__appname();
  _appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._AppName)
}
inline void JSLoginResponse::set__appname(const char* value, size_t size) {
  set_has__appname();
  _appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._AppName)
}
inline ::std::string* JSLoginResponse::mutable__appname() {
  set_has__appname();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._AppName)
  return _appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__appname() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._AppName)
  clear_has__appname();
  return _appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__appname(::std::string* _appname) {
  if (_appname != NULL) {
    set_has__appname();
  } else {
    clear_has__appname();
  }
  _appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _appname);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._AppName)
}

// optional string _AppIConUrl = 6;
inline bool JSLoginResponse::has__appiconurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JSLoginResponse::set_has__appiconurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JSLoginResponse::clear_has__appiconurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JSLoginResponse::clear__appiconurl() {
  _appiconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__appiconurl();
}
inline const ::std::string& JSLoginResponse::_appiconurl() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._AppIConUrl)
  return _appiconurl_.GetNoArena();
}
inline void JSLoginResponse::set__appiconurl(const ::std::string& value) {
  set_has__appiconurl();
  _appiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._AppIConUrl)
}
#if LANG_CXX11
inline void JSLoginResponse::set__appiconurl(::std::string&& value) {
  set_has__appiconurl();
  _appiconurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._AppIConUrl)
}
#endif
inline void JSLoginResponse::set__appiconurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__appiconurl();
  _appiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._AppIConUrl)
}
inline void JSLoginResponse::set__appiconurl(const char* value, size_t size) {
  set_has__appiconurl();
  _appiconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._AppIConUrl)
}
inline ::std::string* JSLoginResponse::mutable__appiconurl() {
  set_has__appiconurl();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._AppIConUrl)
  return _appiconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__appiconurl() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._AppIConUrl)
  clear_has__appiconurl();
  return _appiconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__appiconurl(::std::string* _appiconurl) {
  if (_appiconurl != NULL) {
    set_has__appiconurl();
  } else {
    clear_has__appiconurl();
  }
  _appiconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _appiconurl);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._AppIConUrl)
}

// optional string _Openid = 7;
inline bool JSLoginResponse::has__openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JSLoginResponse::set_has__openid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JSLoginResponse::clear_has__openid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JSLoginResponse::clear__openid() {
  _openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__openid();
}
inline const ::std::string& JSLoginResponse::_openid() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._Openid)
  return _openid_.GetNoArena();
}
inline void JSLoginResponse::set__openid(const ::std::string& value) {
  set_has__openid();
  _openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._Openid)
}
#if LANG_CXX11
inline void JSLoginResponse::set__openid(::std::string&& value) {
  set_has__openid();
  _openid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._Openid)
}
#endif
inline void JSLoginResponse::set__openid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__openid();
  _openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._Openid)
}
inline void JSLoginResponse::set__openid(const char* value, size_t size) {
  set_has__openid();
  _openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._Openid)
}
inline ::std::string* JSLoginResponse::mutable__openid() {
  set_has__openid();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._Openid)
  return _openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__openid() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._Openid)
  clear_has__openid();
  return _openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__openid(::std::string* _openid) {
  if (_openid != NULL) {
    set_has__openid();
  } else {
    clear_has__openid();
  }
  _openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _openid);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._Openid)
}

// optional string _HasSessionKey = 8;
inline bool JSLoginResponse::has__hassessionkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JSLoginResponse::set_has__hassessionkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JSLoginResponse::clear_has__hassessionkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JSLoginResponse::clear__hassessionkey() {
  _hassessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__hassessionkey();
}
inline const ::std::string& JSLoginResponse::_hassessionkey() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._HasSessionKey)
  return _hassessionkey_.GetNoArena();
}
inline void JSLoginResponse::set__hassessionkey(const ::std::string& value) {
  set_has__hassessionkey();
  _hassessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._HasSessionKey)
}
#if LANG_CXX11
inline void JSLoginResponse::set__hassessionkey(::std::string&& value) {
  set_has__hassessionkey();
  _hassessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._HasSessionKey)
}
#endif
inline void JSLoginResponse::set__hassessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__hassessionkey();
  _hassessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._HasSessionKey)
}
inline void JSLoginResponse::set__hassessionkey(const char* value, size_t size) {
  set_has__hassessionkey();
  _hassessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._HasSessionKey)
}
inline ::std::string* JSLoginResponse::mutable__hassessionkey() {
  set_has__hassessionkey();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._HasSessionKey)
  return _hassessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__hassessionkey() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._HasSessionKey)
  clear_has__hassessionkey();
  return _hassessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__hassessionkey(::std::string* _hassessionkey) {
  if (_hassessionkey != NULL) {
    set_has__hassessionkey();
  } else {
    clear_has__hassessionkey();
  }
  _hassessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _hassessionkey);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._HasSessionKey)
}

// optional string _SessionTicket = 9;
inline bool JSLoginResponse::has__sessionticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JSLoginResponse::set_has__sessionticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JSLoginResponse::clear_has__sessionticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JSLoginResponse::clear__sessionticket() {
  _sessionticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__sessionticket();
}
inline const ::std::string& JSLoginResponse::_sessionticket() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._SessionTicket)
  return _sessionticket_.GetNoArena();
}
inline void JSLoginResponse::set__sessionticket(const ::std::string& value) {
  set_has__sessionticket();
  _sessionticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._SessionTicket)
}
#if LANG_CXX11
inline void JSLoginResponse::set__sessionticket(::std::string&& value) {
  set_has__sessionticket();
  _sessionticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._SessionTicket)
}
#endif
inline void JSLoginResponse::set__sessionticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__sessionticket();
  _sessionticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._SessionTicket)
}
inline void JSLoginResponse::set__sessionticket(const char* value, size_t size) {
  set_has__sessionticket();
  _sessionticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._SessionTicket)
}
inline ::std::string* JSLoginResponse::mutable__sessionticket() {
  set_has__sessionticket();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._SessionTicket)
  return _sessionticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__sessionticket() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._SessionTicket)
  clear_has__sessionticket();
  return _sessionticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__sessionticket(::std::string* _sessionticket) {
  if (_sessionticket != NULL) {
    set_has__sessionticket();
  } else {
    clear_has__sessionticket();
  }
  _sessionticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _sessionticket);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._SessionTicket)
}

// optional uint32 _Lifespan = 10;
inline bool JSLoginResponse::has__lifespan() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JSLoginResponse::set_has__lifespan() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JSLoginResponse::clear_has__lifespan() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JSLoginResponse::clear__lifespan() {
  _lifespan_ = 0u;
  clear_has__lifespan();
}
inline ::google::protobuf::uint32 JSLoginResponse::_lifespan() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._Lifespan)
  return _lifespan_;
}
inline void JSLoginResponse::set__lifespan(::google::protobuf::uint32 value) {
  set_has__lifespan();
  _lifespan_ = value;
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._Lifespan)
}

// optional string _State = 11;
inline bool JSLoginResponse::has__state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JSLoginResponse::set_has__state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JSLoginResponse::clear_has__state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JSLoginResponse::clear__state() {
  _state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__state();
}
inline const ::std::string& JSLoginResponse::_state() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._State)
  return _state_.GetNoArena();
}
inline void JSLoginResponse::set__state(const ::std::string& value) {
  set_has__state();
  _state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._State)
}
#if LANG_CXX11
inline void JSLoginResponse::set__state(::std::string&& value) {
  set_has__state();
  _state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._State)
}
#endif
inline void JSLoginResponse::set__state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__state();
  _state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._State)
}
inline void JSLoginResponse::set__state(const char* value, size_t size) {
  set_has__state();
  _state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._State)
}
inline ::std::string* JSLoginResponse::mutable__state() {
  set_has__state();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._State)
  return _state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__state() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._State)
  clear_has__state();
  return _state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__state(::std::string* _state) {
  if (_state != NULL) {
    set_has__state();
  } else {
    clear_has__state();
  }
  _state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _state);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._State)
}

// optional string _Signature = 12;
inline bool JSLoginResponse::has__signature() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JSLoginResponse::set_has__signature() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JSLoginResponse::clear_has__signature() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JSLoginResponse::clear__signature() {
  _signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has__signature();
}
inline const ::std::string& JSLoginResponse::_signature() const {
  // @@protoc_insertion_point(field_get:MMPro.micromsg.JSLoginResponse._Signature)
  return _signature_.GetNoArena();
}
inline void JSLoginResponse::set__signature(const ::std::string& value) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MMPro.micromsg.JSLoginResponse._Signature)
}
#if LANG_CXX11
inline void JSLoginResponse::set__signature(::std::string&& value) {
  set_has__signature();
  _signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MMPro.micromsg.JSLoginResponse._Signature)
}
#endif
inline void JSLoginResponse::set__signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MMPro.micromsg.JSLoginResponse._Signature)
}
inline void JSLoginResponse::set__signature(const char* value, size_t size) {
  set_has__signature();
  _signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MMPro.micromsg.JSLoginResponse._Signature)
}
inline ::std::string* JSLoginResponse::mutable__signature() {
  set_has__signature();
  // @@protoc_insertion_point(field_mutable:MMPro.micromsg.JSLoginResponse._Signature)
  return _signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JSLoginResponse::release__signature() {
  // @@protoc_insertion_point(field_release:MMPro.micromsg.JSLoginResponse._Signature)
  clear_has__signature();
  return _signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JSLoginResponse::set_allocated__signature(::std::string* _signature) {
  if (_signature != NULL) {
    set_has__signature();
  } else {
    clear_has__signature();
  }
  _signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), _signature);
  // @@protoc_insertion_point(field_set_allocated:MMPro.micromsg.JSLoginResponse._Signature)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace micromsg
}  // namespace MMPro

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_JSLoginResponse_2eproto__INCLUDED
